from unittest import TestCase

import numpy as np

from CodeCeline import functions as func
from Week2 import hopefieldNetwork as hop
from Week2 import testingMethods as testing


class Test(TestCase):
    def testCompareLong(self):
        pattern_matrix = hop.generate_patterns(80, 1000)
        print("Computation started...")
        hebbian_func = func.hebbian_weights(pattern_matrix)
        print("hebbian_func created")
        hebbian_hop = hop.hebbian_weights(pattern_matrix)
        print("hebbian_hop created")
        #self.assertTrue((hebbian_hop == hebbian_func).all())
        storkey_func = func.storkey_weights(pattern_matrix)
        print("storkey_func created")
        storkey_hop = hop.storkey_weights(pattern_matrix)
        print("storkey_hop created")
        #self.assertTrue((storkey_func == storkey_hop).all())

        answers_hebbian_func = testing.test_dynamic_func(pattern_matrix, hebbian_func, 80, 20)
        answers_hebbian_hop = testing.test_dynamic_hop(pattern_matrix, hebbian_hop, 80, 20)
        # self.assertTrue(answers_hebbian_func == answers_hebbian_hop)
        answers_storkey_func = testing.test_dynamic_func(pattern_matrix, storkey_func, 80, 20)
        answers_storkey_hop = testing.test_dynamic_hop(pattern_matrix, storkey_hop, 80, 20)
        # self.assertTrue(answers_storkey_func == answers_storkey_hop)
        print("answers_hebbian_func")
        testing.analyse_result(answers_hebbian_func)
        print("answers_hebbian_hop")
        testing.analyse_result(answers_hebbian_hop)
        print("answers_storkey_func")
        testing.analyse_result(answers_storkey_func)
        print("answers_storkey_hop")
        testing.analyse_result(answers_storkey_hop)

        answers_hebbian_func_async = testing.test_dynamic_async_func(pattern_matrix, hebbian_func, 80, 20000, 3000)
        answers_hebbian_hop_async = testing.test_dynamic_async_hop(pattern_matrix, hebbian_hop, 80, 20000, 3000)
        # print(answers_hebbian_func_async)
        # print(answers_hebbian_hop_async)
        # self.assertTrue(answers_hebbian_func_async == answers_hebbian_hop_async)
        answers_storkey_func_async = testing.test_dynamic_async_func(pattern_matrix, storkey_func, 80, 20000, 3000)
        answers_storkey_hop_async = testing.test_dynamic_async_hop(pattern_matrix, storkey_hop, 80, 20000, 3000)
        # self.assertTrue(answers_storkey_func_async == answers_storkey_hop_async)
        print("answers_hebbian_func_async")
        testing.analyse_result(answers_hebbian_func_async)
        print("answers_hebbian_hop_async")
        testing.analyse_result(answers_hebbian_hop_async)
        print("answers_storkey_func_async")
        testing.analyse_result(answers_storkey_func_async)
        print("answers_storkey_hop_async")
        testing.analyse_result(answers_storkey_hop_async)

    def testCompareShort(self):
        pattern_matrix = hop.generate_patterns(3, 20)
        print("Computation started...")
        hebbian_func = func.hebbian_weights(pattern_matrix)
        print("hebbian_func created")
        hebbian_hop = hop.hebbian_weights(pattern_matrix)
        print("hebbian_hop created")
        self.assertTrue((hebbian_hop == hebbian_func).all())
        storkey_func = func.storkey_weights(pattern_matrix)
        print("storkey_func created")
        storkey_hop = hop.storkey_weights(pattern_matrix)
        print("storkey_hop created")
        self.assertTrue((storkey_func == storkey_hop).all())

        # answers_hebbian_func = testing.test_dynamic_func(pattern_matrix, hebbian_func, 1, 20)
        answers_hebbian_hop = testing.test_dynamic_hop(pattern_matrix, hebbian_hop, 1, 20)
        # self.assertTrue(answers_hebbian_func == answers_hebbian_hop)
        # answers_storkey_func = testing.test_dynamic_func(pattern_matrix, storkey_func, 1, 20)
        answers_storkey_hop = testing.test_dynamic_hop(pattern_matrix, storkey_hop, 1, 20)
        # print(answers_storkey_func)
        # print(answers_storkey_hop)
        # self.assertTrue(answers_storkey_func == answers_storkey_hop)
        # print("answers_hebbian_func")
        # testing.analyse_result(answers_hebbian_func)
        print("answers_hebbian_hop")
        testing.analyse_result(answers_hebbian_hop)
        # print("answers_storkey_func")
        # testing.analyse_result(answers_storkey_func)
        print("answers_storkey_hop")
        testing.analyse_result(answers_storkey_hop)

        # answers_hebbian_func_async = testing.test_dynamic_async_func(pattern_matrix, hebbian_func, 3, 1000, 20)
        # answers_hebbian_hop_async = testing.test_dynamic_async_hop(pattern_matrix, hebbian_hop, 3, 1000, 20)
        # print(answers_hebbian_func_async)
        # print(answers_hebbian_hop_async)
        # # self.assertTrue(answers_hebbian_func_async == answers_hebbian_hop_async)
        # answers_storkey_func_async = testing.test_dynamic_async_func(pattern_matrix, storkey_func, 3, 1000, 20)
        # answers_storkey_hop_async = testing.test_dynamic_async_hop(pattern_matrix, storkey_hop, 3, 1000, 20)
        # # self.assertTrue(answers_storkey_func_async == answers_storkey_hop_async)
        # print("answers_hebbian_func_async")
        # testing.analyse_result(answers_hebbian_func_async)
        # print("answers_hebbian_hop_async")
        # testing.analyse_result(answers_hebbian_hop_async)
        # print("answers_storkey_func_async")
        # testing.analyse_result(answers_storkey_func_async)
        # print("answers_storkey_hop_async")
        # testing.analyse_result(answers_storkey_hop_async)

    def testWTF(self):
        pattern_matrix = hop.generate_patterns(50, 1000)
        print("Computation started...")
        # hebbian_hop = hop.hebbian_weights(pattern_matrix)
        # print("hebbian_hop created")
        storkey_hop = hop.storkey_weights(pattern_matrix)
        print("storkey_hop created")

        answers = []
        for i in range(len(pattern_matrix)):
            # print(i)
            error_pattern = hop.perturb_pattern(pattern_matrix[i], 1)
            dynamic = hop.dynamics(error_pattern, storkey_hop, 20)
            # print(hop.pattern_match(pattern_matrix, (dynamic[len(dynamic) - 1])))
            answer = func.pattern_match(pattern_matrix, (dynamic[len(dynamic) - 1]))
            answers.append(False if answer is None else True)
        print(answers)

        answers_test = testing.test_dynamic_hop(pattern_matrix, storkey_hop, 1, 20)
        print(answers_test)

        # error_pattern0 = hop.perturb_pattern(pattern_matrix[0], 1)
        # error_pattern1 = hop.perturb_pattern(pattern_matrix[1], 1)
        # error_pattern2 = hop.perturb_pattern(pattern_matrix[2], 1)
        #
        # dynamic0 = hop.dynamics(error_pattern0, storkey_hop, 20)
        # dynamic1 = hop.dynamics(error_pattern1, storkey_hop, 20)
        # dynamic2 = hop.dynamics(error_pattern2, storkey_hop, 20)
        # print(hop.pattern_match(pattern_matrix, (dynamic0[len(dynamic0) - 1])))
        # print(hop.pattern_match(pattern_matrix, (dynamic1[len(dynamic1) - 1])))
        # print(hop.pattern_match(pattern_matrix, (dynamic2[len(dynamic2) - 1])))
        #
        # print(pattern_matrix[0])
        # print(error_pattern)
        # print((dynamic[len(dynamic) - 1]).astype(int))
        # print(hop.pattern_match(pattern_matrix, (dynamic[len(dynamic) - 1])))

